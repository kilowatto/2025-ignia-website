---
/**
 * LanguageDetection - Sistema de Detección Automática de Idioma (v1.3 Minimalista)
 * 
 * Propósito:
 * Detecta el idioma preferido del usuario (navegador + geolocalización) y renderiza
 * el banner minimalista LanguageSuggestionBanner.astro cuando hay mismatch.
 * 
 * Arquitectura (Opción 1 - Híbrida):
 * 1. Renderiza TODOS los banners posibles desde servidor (hidden)
 * 2. JavaScript detecta idioma y muestra el banner correcto
 * 3. Usa componente Astro minimalista (no crea HTML dinámico)
 * 
 * Cumplimiento arquitectónico:
 * - §2: JS mínimo (solo detección, no crea DOM)
 * - §5: i18n con t() vía LanguageSuggestionBanner
 * - §12: WCAG AA garantizado (componente Astro)
 * - §14: Performance (banners hidden, ~6KB total gzip)
 * 
 * @see src/components/LanguageSuggestionBanner.astro
 * @see arquitecture.md §2, §5, §6, §12, §14
 */

const currentLocale = Astro.currentLocale || "en";
import LanguageSuggestionBanner from "./LanguageSuggestionBanner.astro";

// Idiomas soportados (para renderizar todos los banners)
const supportedLanguages = ["en", "es", "fr"];
---

<!-- 
  Renderizar TODOS los banners posibles (hidden por defecto)
  JavaScript mostrará el correcto según detección
-->
{supportedLanguages.map((suggestedLang) => {
  if (suggestedLang !== currentLocale) {
    return (
      <div 
        id={`language-banner-${suggestedLang}`} 
        data-suggested-lang={suggestedLang}
        data-current-lang={currentLocale}
        class="hidden"
      >
        <LanguageSuggestionBanner 
          suggestedLanguage={suggestedLang} 
          currentLanguage={currentLocale} 
        />
      </div>
    );
  }
})}

<!-- Script minimalista de detección (solo lógica, no crea DOM) -->
<script>
  /**
   * Detección automática de idioma - v1.3 Minimalista
   * 
   * Cambios vs versión anterior:
   * - NO crea HTML dinámicamente (usa componentes pre-renderizados)
   * - Solo muestra/oculta banners existentes
   * - Reduce código de ~233 líneas a ~80 líneas (-65%)
   * 
   * Flujo:
   * 1. Verificar localStorage (dismissed/accepted)
   * 2. Detectar idioma (navegador → geolocalización)
   * 3. Mostrar banner pre-renderizado correspondiente
   */
  
  document.addEventListener("DOMContentLoaded", async () => {
    const supportedLanguages = ["en", "es", "fr"];
    const currentLang = document.documentElement.lang?.split("-")[0] || "en";

    // Verificar si ya se mostró/rechazó la sugerencia
    const dismissed = localStorage.getItem("language-suggestion-dismissed");
    const accepted = localStorage.getItem("language-suggestion-accepted");

    if (dismissed || accepted) {
      return; // No mostrar si ya fue procesado
    }

    // Detectar idioma preferido
    let suggestedLang: string | null = null;

    // 1. Detectar por navegador (primario)
    const browserLangs = navigator.languages || [navigator.language];
    for (const lang of browserLangs) {
      const shortLang = lang.split("-")[0].toLowerCase();
      if (supportedLanguages.includes(shortLang) && shortLang !== currentLang) {
        suggestedLang = shortLang;
        console.log(`[LanguageDetection] Browser language detected: ${suggestedLang}`);
        break;
      }
    }

    // 2. Fallback: Detectar por geolocalización (secundario)
    if (!suggestedLang) {
      try {
        const response = await fetch("https://ipapi.co/json/");
        if (response.ok) {
          const data = await response.json();
          const countryToLang: Record<string, string> = {
            // Español
            ES: "es", MX: "es", AR: "es", CO: "es", PE: "es", CL: "es", VE: "es",
            // Francés
            FR: "fr", BE: "fr", CH: "fr", CA: "fr", LU: "fr",
            // Inglés
            US: "en", GB: "en", AU: "en", NZ: "en", IE: "en", ZA: "en",
          };

          const geoLang = countryToLang[data.country_code];
          if (geoLang && geoLang !== currentLang && supportedLanguages.includes(geoLang)) {
            suggestedLang = geoLang;
            console.log(`[LanguageDetection] Geolocation language detected: ${suggestedLang}`);
          }
        }
      } catch (error) {
        console.log("[LanguageDetection] Geolocation detection failed:", error);
      }
    }

    // 3. Mostrar banner pre-renderizado si hay sugerencia
    if (suggestedLang) {
      const bannerWrapper = document.getElementById(`language-banner-${suggestedLang}`);
      if (bannerWrapper) {
        bannerWrapper.classList.remove("hidden");
        console.log(`[LanguageDetection] Showing suggestion banner for: ${suggestedLang}`);
      }
    }
  });
</script>
