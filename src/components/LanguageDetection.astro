---
// Componente que maneja la detecci√≥n autom√°tica de idioma
const currentLocale = Astro.currentLocale || "en";

// Solo mostrar sugerencia si no estamos en la p√°gina de inicio del idioma detectado
import LanguageSuggestionBanner from "./LanguageSuggestionBanner.astro";
---

<!-- Detecci√≥n autom√°tica de idioma con JavaScript -->
<script>
  document.addEventListener("DOMContentLoaded", async () => {
    const supportedLanguages = ["en", "es", "fr"];
    const currentLang = document.documentElement.lang?.split("-")[0] || "en";

    // Verificar si ya se mostr√≥/rechaz√≥ la sugerencia
    const dismissed = localStorage.getItem("language-suggestion-dismissed");
    const accepted = localStorage.getItem("language-suggestion-accepted");

    if (dismissed || accepted) {
      return; // No mostrar si ya fue procesado
    }

    // Detectar idioma preferido
    let suggestedLang: string | null = null;

    // 1. Detectar por navegador
    const browserLangs = navigator.languages || [navigator.language];
    for (const lang of browserLangs) {
      const shortLang = lang.split("-")[0].toLowerCase();
      if (supportedLanguages.includes(shortLang) && shortLang !== currentLang) {
        suggestedLang = shortLang;
        break;
      }
    }

    // 2. Si no hay sugerencia del navegador, intentar geolocalizaci√≥n
    if (!suggestedLang) {
      try {
        const response = await fetch("https://ipapi.co/json/");
        if (response.ok) {
          const data = await response.json();
          const countryToLang: Record<string, string> = {
            ES: "es",
            MX: "es",
            AR: "es",
            CO: "es",
            PE: "es",
            CL: "es",
            VE: "es",
            FR: "fr",
            BE: "fr",
            CH: "fr",
            CA: "fr",
            LU: "fr",
            US: "en",
            GB: "en",
            AU: "en",
            NZ: "en",
            IE: "en",
            ZA: "en",
          };

          const geoLang = countryToLang[data.country_code];
          if (
            geoLang &&
            geoLang !== currentLang &&
            supportedLanguages.includes(geoLang)
          ) {
            suggestedLang = geoLang;
          }
        }
      } catch (error) {
        console.log("Geolocation detection failed:", error);
      }
    }

    // Si hay sugerencia, crear y mostrar banner din√°micamente
    if (suggestedLang) {
      createAndShowLanguageBanner(suggestedLang, currentLang);
    }
  });

  function createAndShowLanguageBanner(
    suggestedLang: string,
    currentLang: string
  ) {
    const languageNames: Record<string, any> = {
      en: { native: "English", english: "English", flag: "üá∫üá∏" },
      es: { native: "Espa√±ol", english: "Spanish", flag: "üá™üá∏" },
      fr: { native: "Fran√ßais", english: "French", flag: "üá´üá∑" },
    };

    const suggestedLangInfo = languageNames[suggestedLang];
    const suggestionUrl = generateLanguageUrl(suggestedLang);

    const banner = document.createElement("div");
    banner.id = "language-suggestion-banner";
    banner.className =
      "fixed top-0 left-0 right-0 z-50 bg-gradient-to-r from-gray-800 via-secondary to-primary text-white shadow-xl border-b-4 border-accent1 transform -translate-y-full transition-transform duration-300 ease-out";

    banner.setAttribute("role", "banner");
    banner.setAttribute("aria-label", "Sugerencia de cambio de idioma");
    banner.setAttribute("aria-live", "polite");

    banner.innerHTML = `
      <div class="max-w-7xl mx-auto px-4 py-4 flex items-center justify-between">
        <div class="flex items-center gap-4" role="group" aria-labelledby="banner-message">
          <div class="flex-shrink-0 w-12 h-12 bg-white/10 rounded-full flex items-center justify-center border-2 border-accent1">
            <span class="text-2xl" role="img" aria-label="Bandera de ${suggestedLangInfo.native}">${suggestedLangInfo.flag}</span>
          </div>
          <div class="flex flex-col sm:flex-row sm:items-center sm:gap-3">
            <span class="font-subtitle font-bold text-lg text-white" id="banner-message">
              ${
                suggestedLang === "es"
                  ? "¬øPrefieres ver el sitio en espa√±ol?"
                  : suggestedLang === "fr"
                    ? "Pr√©f√©rez-vous voir le site en fran√ßais?"
                    : "Would you like to view this site in English?"
              }
            </span>
            <span class="text-sm text-gray-100 font-body mt-1 sm:mt-0" aria-describedby="banner-message">
              ${
                suggestedLang === "es"
                  ? "Detectamos que tu navegador est√° configurado en espa√±ol"
                  : suggestedLang === "fr"
                    ? "Nous avons d√©tect√© que votre navigateur est configur√© en fran√ßais"
                    : "We detected your browser is configured in English"
              }
            </span>
          </div>
        </div>
        
        <div class="flex items-center gap-3" role="group" aria-label="Acciones de idioma">
          <a 
            href="${suggestionUrl}"
            class="bg-gradient-to-r from-accent1 to-primary text-gray-900 px-6 py-3 rounded-lg font-subtitle font-bold text-sm hover:from-primary hover:to-accent2 hover:text-white transform hover:scale-105 transition-all duration-200 shadow-lg focus:outline-none focus:ring-3 focus:ring-accent1/50 focus:ring-offset-2 focus:ring-offset-gray-800"
            onclick="acceptLanguageSuggestion()"
            role="button"
            tabindex="0"
            aria-label="${
              suggestedLang === "es"
                ? "Cambiar el sitio web al idioma espa√±ol"
                : suggestedLang === "fr"
                  ? "Changer le site web en fran√ßais"
                  : "Switch website to English"
            }"
          >
            ${
              suggestedLang === "es"
                ? "Cambiar idioma"
                : suggestedLang === "fr"
                  ? "Changer langue"
                  : "Switch Language"
            }
          </a>
          
          <button 
            onclick="dismissLanguageSuggestion()"
            class="bg-gray-600/30 hover:bg-gray-600 text-gray-100 hover:text-white p-3 rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-offset-2 focus:ring-offset-gray-800 group"
            aria-label="${
              suggestedLang === "es"
                ? "Descartar sugerencia de cambio de idioma"
                : suggestedLang === "fr"
                  ? "Rejeter la suggestion de changement de langue"
                  : "Dismiss language suggestion"
            }"
            type="button"
            tabindex="0"
          >
            <svg class="w-5 h-5 group-hover:rotate-90 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2.5" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
      </div>
    `;

    document.body.insertBefore(banner, document.body.firstChild);

    // Mostrar banner despu√©s de un delay
    setTimeout(() => {
      banner.classList.remove("-translate-y-full");
      banner.classList.add("translate-y-0");
      document.body.style.paddingTop = banner.offsetHeight + "px";
    }, 1500);
  }

  // Funciones globales para el banner
  (window as any).acceptLanguageSuggestion = function () {
    localStorage.setItem("language-suggestion-accepted", "true");
    hideLanguageSuggestion();
  };

  (window as any).dismissLanguageSuggestion = function () {
    localStorage.setItem("language-suggestion-dismissed", "true");
    hideLanguageSuggestion();
  };

  function hideLanguageSuggestion() {
    const banner = document.getElementById("language-suggestion-banner");
    if (banner) {
      banner.classList.add("-translate-y-full");
      banner.classList.remove("translate-y-0");
      document.body.style.paddingTop = "0";
    }
  }

  function generateLanguageUrl(targetLang: string) {
    const path = window.location.pathname;
    const currentLang = getCurrentLanguage();

    if (currentLang === "en") {
      if (targetLang === "en") return path;
      return `/${targetLang}${path}`;
    }

    const pathWithoutLang = path.replace(`/${currentLang}`, "") || "/";

    if (targetLang === "en") {
      return pathWithoutLang;
    }

    return `/${targetLang}${pathWithoutLang}`;
  }

  function getCurrentLanguage() {
    const pathSegments = window.location.pathname.split("/").filter(Boolean);
    const urlLang = pathSegments[0];

    return ["en", "es", "fr"].includes(urlLang) ? urlLang : "en";
  }
</script>
