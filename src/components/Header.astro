---
const locale = Astro.currentLocale || "en";

// Importamos las traducciones usando import est√°tico
import enTranslations from "../../public/locales/en/common.json";
import esTranslations from "../../public/locales/es/common.json";
import frTranslations from "../../public/locales/fr/common.json";

// Importamos el componente del selector de idiomas
import LangSelect from "./langSelect.astro";

// Mapa de traducciones
const translations = {
  en: enTranslations,
  es: esTranslations,
  fr: frTranslations,
};

// Funci√≥n simple de traducci√≥n
const t = (key: string): string => {
  const keys = key.split(".");
  let value: any = translations[locale as keyof typeof translations];

  for (const k of keys) {
    value = value?.[k];
  }

  return value || key;
};

// 1. Reemplazamos los textos por claves de traducci√≥n
const links = [
  { href: "/soluciones/", tKey: "nav.solutions" },
  { href: "/productos/", tKey: "nav.products" },
  { href: "/servicios/", tKey: "nav.services" },
  { href: "/soporte/", tKey: "nav.support" },
];
const base = locale === "en" ? "" : `/${locale}`;
---

<header class="w-full bg-white shadow-[0_4px_7px_0_var(--color-primary)]">
  <div
    class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 flex items-center justify-between h-24"
  >
    <a href={locale === "en" ? "/" : `/${locale}/`}>
      {/* El logo ahora apunta a la ra√≠z del idioma actual */}
      <img class="h-16 w-auto" src="/logo.svg" alt="Ignia Cloud Logo" />
    </a>

    <div class="flex items-center gap-6">
      <nav>
        <div id="magic-nav-container" class="relative flex items-center gap-8">
          {
            links.map((link) => (
              <a
                aria-label={t(link.tKey)}
                href={locale === "en" ? link.href : `/${locale}${link.href}`}
                class="nav-link text-secondary font-medium text-lg py-2 "
              >
                {t(link.tKey)}
              </a>
            ))
          }

          <span
            id="magic-line"
            class="absolute bottom-0 bg-primary rounded-full shadow-lg magic-line-debug"
            style="opacity: 0; width: 0px; height: 6px; transform: translateX(0px); background-color: #f36b1c !important; z-index: 100; transition: all 0.3s ease;"
          ></span>
        </div>
      </nav>

      <!-- Selector de idiomas -->
      <LangSelect />
    </div>
  </div>
</header>

{/* El style y el script permanecen exactamente iguales */}
<style>
  #magic-line {
    transition:
      transform 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94),
      width 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94),
      opacity 0.3s ease-in-out !important;
    z-index: 100 !important;
    pointer-events: none !important;
    background-color: #f36b1c !important;
    height: 6px !important;
    border-radius: 9999px !important;
    box-shadow: 0 4px 6px -1px rgba(243, 107, 28, 0.5) !important;
  }

  /* Clase adicional para debuggear */
  .magic-line-debug {
    background: #f36b1c !important;
    display: block !important;
    position: absolute !important;
    bottom: 0 !important;
    height: 6px !important;
    border-radius: 9999px !important;
    z-index: 9999 !important;
    box-shadow: 0 4px 6px -1px rgba(243, 107, 28, 0.5) !important;
  }

  /* Asegurar que el container tenga posici√≥n relativa */
  #magic-nav-container {
    position: relative !important;
  }

  /* Sobrescribir cualquier transici√≥n que pueda interferir */
  .nav-link {
    position: relative !important;
    z-index: 5 !important;
  }
</style>
<script>
  // Script del magic line m√°s robusto
  let magicLineInitialized = false;

  function initMagicLine() {
    if (magicLineInitialized) return;

    const navContainer = document.querySelector(
      "#magic-nav-container"
    ) as HTMLElement;
    const magicLine = document.querySelector("#magic-line") as HTMLElement;
    const navLinks = document.querySelectorAll<HTMLElement>(".nav-link");

    console.log("üîç Magic Line Debug:", {
      navContainer: !!navContainer,
      magicLine: !!magicLine,
      navLinksCount: navLinks.length,
    });

    if (!navContainer || !magicLine || navLinks.length === 0) {
      console.error("‚ùå Magic Line: Missing elements");
      setTimeout(initMagicLine, 100); // Retry after 100ms
      return;
    }

    magicLineInitialized = true;
    console.log("‚úÖ Magic Line: Initialized successfully");

    let hideTimeout: number;

    navLinks.forEach((link, index) => {
      link.addEventListener("mouseenter", () => {
        clearTimeout(hideTimeout);
        const rect = link.getBoundingClientRect();
        const containerRect = navContainer.getBoundingClientRect();
        const linkWidth = rect.width;
        const linkLeft = rect.left - containerRect.left;

        console.log(`üéØ Link ${index} hover:`, { linkWidth, linkLeft });

        // Aplicar todos los estilos de una vez
        Object.assign(magicLine.style, {
          width: `${linkWidth}px`,
          transform: `translateX(${linkLeft}px)`,
          opacity: "1",
          backgroundColor: "#f36b1c",
          height: "6px",
          zIndex: "9999",
          position: "absolute",
          bottom: "0px",
          borderRadius: "9999px",
          boxShadow: "0 4px 6px -1px rgba(243, 107, 28, 0.5)",
          transition: "all 0.3s ease",
        });

        console.log("üé® Magic line styles applied:", {
          width: magicLine.style.width,
          opacity: magicLine.style.opacity,
          backgroundColor: magicLine.style.backgroundColor,
        });
      });
    });

    navContainer.addEventListener("mouseleave", () => {
      hideTimeout = window.setTimeout(() => {
        console.log("ü´• Hiding magic line");
        magicLine.style.opacity = "0";
      }, 500); // Aument√© el delay a 500ms
    });

    // Evento adicional para mantener la l√≠nea visible
    navContainer.addEventListener("mouseenter", () => {
      clearTimeout(hideTimeout);
    });
  }

  // Intentar inicializar en diferentes momentos
  document.addEventListener("DOMContentLoaded", initMagicLine);

  // Fallback si DOMContentLoaded ya pas√≥
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initMagicLine);
  } else {
    initMagicLine();
  }

  // Triple fallback
  setTimeout(initMagicLine, 500);
</script>
