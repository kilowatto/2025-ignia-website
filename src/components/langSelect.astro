---
const currentLocale = Astro.currentLocale || "en";

// Importamos las utilidades de detección
import {
  languageNames,
  generateLanguageUrl,
  type SupportedLanguage,
} from "../utils/languageDetection";

// Importamos las traducciones para los nombres de los idiomas
import enTranslations from "../../public/locales/en/common.json";
import esTranslations from "../../public/locales/es/common.json";
import frTranslations from "../../public/locales/fr/common.json";

const translations = {
  en: enTranslations,
  es: esTranslations,
  fr: frTranslations,
};

const t = (key: string): string => {
  const keys = key.split(".");
  let value: any = translations[currentLocale as keyof typeof translations];

  for (const k of keys) {
    value = value?.[k];
  }

  return value || key;
};

// Configuración de idiomas usando las utilidades
const languages = Object.entries(languageNames).map(([code, info]) => ({
  code: code as SupportedLanguage,
  name: info.english,
  flag: info.flag,
  nativeName: info.native,
}));

const currentLanguage = languages.find((lang) => lang.code === currentLocale);
---

<div class="relative inline-block text-left" id="language-selector">
  <!-- Botón del selector -->
  <button
    type="button"
    class="inline-flex items-center gap-2 px-3 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition-colors"
    id="language-button"
    aria-expanded="false"
    aria-haspopup="true"
  >
    <span class="text-lg">{currentLanguage?.flag}</span>
    <span class="hidden sm:inline">{currentLanguage?.nativeName}</span>
    <span class="sm:hidden">{currentLanguage?.code.toUpperCase()}</span>
    <!-- Icono de flecha -->
    <svg
      class="w-4 h-4 transition-transform"
      id="language-arrow"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M19 9l-7 7-7-7"></path>
    </svg>
  </button>

  <!-- Dropdown menu -->
  <div
    class="absolute right-0 z-50 mt-2 w-48 bg-white border border-gray-200 rounded-md shadow-lg opacity-0 invisible transform scale-95 transition-all duration-200 ease-out"
    id="language-menu"
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="language-button"
  >
    <div class="py-1" role="none">
      {
        languages.map((language) => (
          <a
            href={generateLanguageUrl(language.code)}
            class={`
            flex items-center gap-3 px-4 py-2 text-sm transition-colors
            ${
              currentLocale === language.code
                ? "bg-primary/10 text-primary font-medium"
                : "text-gray-700 hover:bg-gray-100"
            }
          `}
            role="menuitem"
            data-lang-switch={language.code}
          >
            <span class="text-lg">{language.flag}</span>
            <div class="flex flex-col">
              <span class="font-medium">{language.nativeName}</span>
              <span class="text-xs text-gray-500">{language.name}</span>
            </div>
            {currentLocale === language.code && (
              <svg
                class="w-4 h-4 ml-auto text-primary"
                fill="currentColor"
                viewBox="0 0 20 20"
              >
                <path
                  fill-rule="evenodd"
                  d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                  clip-rule="evenodd"
                />
              </svg>
            )}
          </a>
        ))
      }
    </div>
  </div>
</div>

<style>
  #language-menu.show {
    opacity: 1;
    visibility: visible;
    transform: scale(1);
  }

  #language-arrow.rotate {
    transform: rotate(180deg);
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const button = document.getElementById("language-button");
    const menu = document.getElementById("language-menu");
    const arrow = document.getElementById("language-arrow");

    if (!button || !menu || !arrow) return;

    let isOpen = false;

    // Toggle del dropdown
    const toggleDropdown = () => {
      isOpen = !isOpen;

      if (isOpen) {
        menu.classList.add("show");
        arrow.classList.add("rotate");
        button.setAttribute("aria-expanded", "true");
      } else {
        menu.classList.remove("show");
        arrow.classList.remove("rotate");
        button.setAttribute("aria-expanded", "false");
      }
    };

    // Cerrar dropdown
    const closeDropdown = () => {
      if (isOpen) {
        isOpen = false;
        menu.classList.remove("show");
        arrow.classList.remove("rotate");
        button.setAttribute("aria-expanded", "false");
      }
    };

    // Event listeners
    button.addEventListener("click", (e) => {
      e.stopPropagation();
      toggleDropdown();
    });

    // Cerrar al hacer click fuera
    document.addEventListener("click", closeDropdown);

    // Prevenir cierre al hacer click dentro del menu
    menu.addEventListener("click", (e) => {
      e.stopPropagation();
    });

    // Cerrar con Escape
    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape") {
        closeDropdown();
      }
    });

    // Guardar preferencia cuando usuario cambia idioma
    document.querySelectorAll("[data-lang-switch]").forEach((link) => {
      link.addEventListener("click", (e) => {
        const targetLang = (e.target as HTMLElement).getAttribute(
          "data-lang-switch"
        );
        if (targetLang) {
          // Guardar en localStorage
          localStorage.setItem("preferred-language", targetLang);

          // Guardar en cookie para el servidor
          document.cookie = `preferred-language=${targetLang}; max-age=31536000; path=/; sameSite=lax`;
        }
      });
    });
  });
</script>
