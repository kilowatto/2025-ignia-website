---
import Layout from "../layouts/Layout.astro";
import { t } from 'astro-i18n';
import { getSearchDataByLocale } from "../data/searchData";

export interface Props {
  locale?: 'en' | 'es' | 'fr';
}

const url = Astro.url;
const initialQuery = url.searchParams.get('q') ?? '';
const initialCategory = url.searchParams.get('category') ?? '';
const initialType = url.searchParams.get('type') ?? '';
const initialPage = parseInt(url.searchParams.get('page') ?? '1');

const supportedLocales = ['en', 'es', 'fr'] as const;
const requestedLocale = (Astro.locals?.locale ?? (Astro.props as Props).locale ?? 'en') as string;
const locale = (supportedLocales as readonly string[]).includes(requestedLocale)
  ? (requestedLocale as 'en' | 'es' | 'fr')
  : 'en';

const translate = (key: string) => t(key, undefined, { locale });

const pageType = 'SearchResultsPage';
const layoutTitle = initialQuery
  ? `${translate('search.results_for')} "${initialQuery}" - Ignia`
  : `${translate('search.results_title')} - Ignia`;
const layoutDescription = translate('search.meta_description');
const searchPath = locale === 'en' ? '/search' : `/${locale}/search`;

const filters = {
  category: {
    all: translate('search.filters.category.all'),
    service: translate('search.filters.category.service'),
    product: translate('search.filters.category.product'),
    article: translate('search.filters.category.article'),
  },
  type: {
    all: translate('search.filters.type.all'),
  },
  clear: translate('search.filters.clear'),
  sort: {
    label: translate('search.filters.sort.label'),
    options: {
      relevance: translate('search.filters.sort.options.relevance'),
      title: translate('search.filters.sort.options.title'),
      category: translate('search.filters.sort.options.category'),
    },
  },
};

const statsLabels = {
  title: translate('search.stats.title'),
  total: translate('search.stats.total'),
  time: translate('search.stats.time'),
  page: translate('search.stats.page'),
};

const i18nPayload = {
  locale,
  filters,
  stats: statsLabels,
  relatedTitle: translate('search.related_title'),
  loading: translate('search.loading'),
  empty: translate('search.empty'),
  noResults: {
    title: translate('search.no_results.title'),
    message: translate('search.no_results.message'),
    tipsIntro: translate('search.no_results.tips.intro'),
    tipsItems: {
      general: translate('search.no_results.tips.items.general'),
      spelling: translate('search.no_results.tips.items.spelling'),
      combinations: translate('search.no_results.tips.items.combinations'),
      filters: translate('search.no_results.tips.items.filters'),
    },
  },
  error: {
    title: translate('search.error_title'),
    message: translate('search.error_message'),
  },
  resultsDescription: translate('search.results_description'),
  pagination: {
    previous: translate('search.pagination.previous'),
    next: translate('search.pagination.next'),
  },
  suggestionsLabel: translate('search.suggestions'),
  resultsTitle: translate('search.results_title'),
  resultsFor: translate('search.results_for'),
};

const searchDataLocale = getSearchDataByLocale(locale);
const i18nJson = JSON.stringify(i18nPayload);
---

<Layout
  title={layoutTitle}
  Content_Description={layoutDescription}
  pageType={pageType}
>
  <div class="max-w-6xl mx-auto px-4 py-8">
    <!-- Header de búsqueda -->
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-gray-900 mb-4">
        {
          initialQuery
            ? `${t("search.results_for")} "${initialQuery}"`
            : t("search.results_title")
        }
      </h1>

      <!-- Formulario de búsqueda mejorado -->
      <form action="/search" method="GET" class="max-w-3xl mb-6">
        <div class="relative">
          <input
            type="search"
            name="q"
            value={initialQuery}
            placeholder={t("search.placeholder")}
            class="w-full pl-12 pr-20 py-4 border border-gray-300 rounded-xl focus:ring-2 focus:ring-primary focus:border-primary transition-all duration-200 bg-white shadow-sm text-lg"
            autocomplete="off"
            id="search-input"
          />
          <div
            class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none"
          >
            <svg
              class="w-6 h-6 text-gray-400"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
          </div>
          <button
            type="submit"
            class="absolute right-3 top-1/2 transform -translate-y-1/2 bg-primary text-white px-6 py-2 rounded-lg hover:bg-secondary transition-all duration-200 font-medium shadow-sm"
          >
            {t("search.button")}
          </button>
        </div>
      </form>

      <!-- Filtros avanzados -->
      <div class="flex flex-wrap gap-4 mb-6" id="filters-container">
        <!-- Filtro por categoría -->
        <div class="relative">
          <select
            name="category"
            id="category-filter"
            class="appearance-none bg-white border border-gray-300 rounded-lg px-4 py-2 pr-8 focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary"
          >
            <option value="">All Categories</option>
            <option value="service">Services</option>
            <option value="product">Products</option>
            <option value="article">Articles</option>
          </select>
          <div
            class="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none"
          >
            <svg
              class="w-4 h-4 text-gray-400"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M19 9l-7 7-7-7"></path>
            </svg>
          </div>
        </div>

        <!-- Filtro por tipo -->
        <div class="relative">
          <select
            name="type"
            id="type-filter"
            class="appearance-none bg-white border border-gray-300 rounded-lg px-4 py-2 pr-8 focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary"
          >
            <option value="">All Types</option>
          </select>
          <div
            class="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none"
          >
            <svg
              class="w-4 h-4 text-gray-400"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M19 9l-7 7-7-7"></path>
            </svg>
          </div>
        </div>

        <!-- Botón para limpiar filtros -->
        <button
          type="button"
          id="clear-filters"
          class="px-4 py-2 text-sm text-gray-600 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors duration-200"
        >
          Clear Filters
        </button>
      </div>
    </div>

    <!-- Contenedor principal con sidebar y resultados -->
    <div class="flex gap-8">
      <!-- Sidebar con estadísticas y filtros -->
      <aside class="w-64 hidden lg:block">
        <div
          class="bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-6"
        >
          <h3 class="font-semibold text-gray-900 mb-4">Search Statistics</h3>
          <div class="space-y-3">
            <div class="flex justify-between text-sm">
              <span class="text-gray-600">Total Results:</span>
              <span class="font-medium" id="total-results">0</span>
            </div>
            <div class="flex justify-between text-sm">
              <span class="text-gray-600">Search Time:</span>
              <span class="font-medium" id="search-time">0ms</span>
            </div>
            <div class="flex justify-between text-sm">
              <span class="text-gray-600">Current Page:</span>
              <span class="font-medium" id="current-page">1</span>
            </div>
          </div>
        </div>

        <!-- Sugerencias relacionadas -->
        <div
          class="bg-white rounded-xl shadow-sm border border-gray-200 p-6"
          id="related-suggestions"
          style="display: none;"
        >
          <h3 class="font-semibold text-gray-900 mb-4">Related Searches</h3>
          <div class="space-y-2" id="suggestions-list">
            <!-- Las sugerencias se llenarán dinámicamente -->
          </div>
        </div>
      </aside>

      <!-- Resultados de búsqueda -->
      <main class="flex-1">
        <!-- Información de resultados -->
        <div
          class="flex items-center justify-between mb-6"
          id="results-header"
          style="display: none;"
        >
          <div class="text-sm text-gray-600" id="results-info">
            <!-- Se llenará dinámicamente -->
          </div>

          <!-- Ordenamiento -->
          <div class="flex items-center gap-2">
            <label for="sort-select" class="text-sm text-gray-600"
              >Sort by:</label
            >
            <select
              id="sort-select"
              class="text-sm border border-gray-300 rounded-lg px-3 py-1 focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary"
            >
              <option value="relevance">Relevance</option>
              <option value="title">Title A-Z</option>
              <option value="category">Category</option>
            </select>
          </div>
        </div>

        <!-- Contenedor de resultados -->
        <div id="search-results" class="space-y-6">
          <div class="text-center py-12">
            <svg
              class="w-20 h-20 text-gray-400 mx-auto mb-4"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
            <p class="text-gray-500 text-lg" id="loading-text">
              {initialQuery ? "Searching..." : "Enter a search term to begin"}
            </p>
          </div>
        </div>

        <!-- Paginación -->
        <nav
          class="flex items-center justify-center space-x-2 mt-8"
          id="pagination"
          style="display: none;"
        >
          <!-- Se llenará dinámicamente -->
        </nav>
      </main>
    </div>
  </div>
</Layout>

<script>
  import MiniSearch from "minisearch";
  import { getSearchDataByLocale } from "../data/searchData.ts";
  import {
    createSearchIndex,
    performSearch,
    getSearchSuggestions,
  } from "../utils/searchConfig.ts";

  // Configuración de paginación
  const RESULTS_PER_PAGE = 6;
  let currentPage = 1;
  let totalResults = 0;
  let lastQuery = "";
  let lastFilters: { category?: string; type?: string } = {};
  let lastSort = "relevance";
  let searchStartTime = 0;

  document.addEventListener("DOMContentLoaded", async () => {
    const resultsContainer = document.getElementById("search-results");
    const loadingText = document.getElementById("loading-text");
    const resultsHeader = document.getElementById("results-header");
    const resultsInfo = document.getElementById("results-info");
    const totalResultsSpan = document.getElementById("total-results");
    const searchTimeSpan = document.getElementById("search-time");
    const currentPageSpan = document.getElementById("current-page");
    const paginationContainer = document.getElementById("pagination");
    const relatedSuggestions = document.getElementById("related-suggestions");
    const suggestionsListsContainer =
      document.getElementById("suggestions-list");

    // Obtener parámetros de URL
    const urlParams = new URLSearchParams(window.location.search);
    const initialQuery = urlParams.get("q") || "";
    const categoryFilter = urlParams.get("category") || "";
    const typeFilter = urlParams.get("type") || "";
    currentPage = parseInt(urlParams.get("page") || "1");

    // Actualizar filtros en la UI
    const categorySelect = document.getElementById(
      "category-filter"
    ) as HTMLSelectElement;
    const typeSelect = document.getElementById(
      "type-filter"
    ) as HTMLSelectElement;
    const sortSelect = document.getElementById(
      "sort-select"
    ) as HTMLSelectElement;
    const clearFiltersBtn = document.getElementById("clear-filters");

    if (categorySelect) categorySelect.value = categoryFilter;
    if (typeSelect) typeSelect.value = typeFilter;

    // Obtener datos de búsqueda para el idioma inglés (en)
    const searchData = getSearchDataByLocale("en");

    // Poblar filtros dinámicamente
    populateFilters(searchData);

    // Función para poblar los filtros con datos reales
    function populateFilters(data: any[]) {
      const types = [...new Set(data.map((item) => item.type))];

      if (typeSelect) {
        typeSelect.innerHTML = '<option value="">All Types</option>';
        types.forEach((type) => {
          const option = document.createElement("option");
          option.value = type;
          option.textContent = type.charAt(0).toUpperCase() + type.slice(1);
          typeSelect.appendChild(option);
        });
        typeSelect.value = typeFilter;
      }
    }

    // Función principal para realizar búsqueda
    async function executeSearch(
      query: string,
      filters: { category?: string; type?: string } = {},
      sort: string = "relevance",
      page: number = 1
    ) {
      if (!query.trim()) {
        showEmptyState();
        return;
      }

      searchStartTime = performance.now();
      showLoadingState();

      try {
        // Usar la función de búsqueda de searchConfig.ts
        const results = performSearch({
          query,
          locale: "en",
          filters: {
            type: filters.type ? [filters.type] : undefined,
            category: filters.category ? [filters.category] : undefined,
          },
          sortBy: sort as "relevance" | "date" | "priority",
        });

        // Calcular paginación
        totalResults = results.length;
        const startIndex = (page - 1) * RESULTS_PER_PAGE;
        const endIndex = startIndex + RESULTS_PER_PAGE;
        const paginatedResults = results.slice(startIndex, endIndex);

        const searchTime = performance.now() - searchStartTime;

        // Actualizar estadísticas
        updateStatistics(totalResults, searchTime, page);

        // Mostrar resultados
        displayResults(paginatedResults, query);

        // Mostrar paginación
        updatePagination(page, Math.ceil(totalResults / RESULTS_PER_PAGE));

        // Mostrar sugerencias relacionadas
        displayRelatedSuggestions(query);

        // Guardar estado
        lastQuery = query;
        lastFilters = filters;
        lastSort = sort;
      } catch (error) {
        console.error("Error en la búsqueda:", error);
        showErrorState();
      }
    }

    // Función para mostrar resultados
    function displayResults(results: any[], query: string) {
      if (results.length === 0) {
        showNoResultsState(query);
        return;
      }

      const resultsHTML = results
        .map(
          (result) => `
          <article class="bg-white border border-gray-200 rounded-xl p-6 shadow-sm hover:shadow-lg transition-all duration-300 group">
            <div class="flex items-start justify-between">
              <div class="flex-1">
                <div class="flex items-center gap-3 mb-3">
                  <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-primary/10 text-primary border border-primary/20">
                    ${result.category}
                  </span>
                  <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-600">
                    ${result.type}
                  </span>
                  ${result.score ? `<span class="text-xs text-gray-400">Score: ${Math.round(result.score * 100) / 100}</span>` : ""}
                </div>
                
                <h2 class="text-xl font-semibold text-gray-900 mb-3 group-hover:text-primary transition-colors">
                  <a href="${result.url}" class="block">
                    ${highlightMatch(result.title, query)}
                  </a>
                </h2>
                
                <p class="text-gray-600 mb-4 line-clamp-3 leading-relaxed">
                  ${highlightMatch(result.description, query)}
                </p>
                
                ${
                  result.tags
                    ? `
                <div class="flex flex-wrap gap-2 mb-4">
                  ${result.tags
                    .map(
                      (tag: string) => `
                    <span class="inline-flex items-center px-2 py-1 rounded-md text-xs bg-gray-50 text-gray-600 border border-gray-200">
                      #${tag}
                    </span>
                  `
                    )
                    .join("")}
                </div>
                `
                    : ""
                }
                
                <div class="flex items-center justify-between">
                  <a 
                    href="${result.url}" 
                    class="inline-flex items-center text-primary hover:text-secondary transition-colors font-medium group"
                  >
                    Read more
                    <svg class="w-4 h-4 ml-1 transition-transform group-hover:translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                    </svg>
                  </a>
                  
                  ${
                    result.lastUpdated
                      ? `
                  <span class="text-xs text-gray-400">
                    Updated: ${new Date(result.lastUpdated).toLocaleDateString()}
                  </span>
                  `
                      : ""
                  }
                </div>
              </div>
            </div>
          </article>
        `
        )
        .join("");

      resultsContainer!.innerHTML = resultsHTML;
      resultsHeader!.style.display = "flex";
      resultsInfo!.textContent = `Showing ${(currentPage - 1) * RESULTS_PER_PAGE + 1}-${Math.min(currentPage * RESULTS_PER_PAGE, totalResults)} of ${totalResults} results for "${query}"`;
    }

    // Función para resaltar coincidencias
    function highlightMatch(text: string, query: string): string {
      if (!query || !text) return text;

      const words = query.split(/\s+/).filter((word) => word.length > 2);
      let highlightedText = text;

      words.forEach((word) => {
        const regex = new RegExp(`(${word})`, "gi");
        highlightedText = highlightedText.replace(
          regex,
          '<mark class="bg-yellow-200/70 text-yellow-900 font-medium px-1 rounded">$1</mark>'
        );
      });

      return highlightedText;
    }

    // Función para actualizar estadísticas
    function updateStatistics(total: number, time: number, page: number) {
      if (totalResultsSpan) totalResultsSpan.textContent = total.toString();
      if (searchTimeSpan) searchTimeSpan.textContent = `${Math.round(time)}ms`;
      if (currentPageSpan) currentPageSpan.textContent = page.toString();
    }

    // Función para actualizar paginación
    function updatePagination(page: number, totalPages: number) {
      if (totalPages <= 1) {
        paginationContainer!.style.display = "none";
        return;
      }

      paginationContainer!.style.display = "flex";

      let paginationHTML = "";

      // Botón anterior
      if (page > 1) {
        paginationHTML += `
          <button class="pagination-btn px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-l-md hover:bg-gray-50 hover:text-gray-700 transition-colors" data-page="${page - 1}">
            Previous
          </button>
        `;
      }

      // Números de página
      const startPage = Math.max(1, page - 2);
      const endPage = Math.min(totalPages, page + 2);

      if (startPage > 1) {
        paginationHTML += `<button class="pagination-btn px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 hover:bg-gray-50 hover:text-gray-700 transition-colors" data-page="1">1</button>`;
        if (startPage > 2) {
          paginationHTML += `<span class="px-3 py-2 text-sm font-medium text-gray-500">...</span>`;
        }
      }

      for (let i = startPage; i <= endPage; i++) {
        const isActive = i === page;
        paginationHTML += `
          <button class="pagination-btn px-3 py-2 text-sm font-medium border ${
            isActive
              ? "text-primary bg-primary/10 border-primary"
              : "text-gray-500 bg-white border-gray-300 hover:bg-gray-50 hover:text-gray-700"
          } transition-colors" data-page="${i}">
            ${i}
          </button>
        `;
      }

      if (endPage < totalPages) {
        if (endPage < totalPages - 1) {
          paginationHTML += `<span class="px-3 py-2 text-sm font-medium text-gray-500">...</span>`;
        }
        paginationHTML += `<button class="pagination-btn px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 hover:bg-gray-50 hover:text-gray-700 transition-colors" data-page="${totalPages}">${totalPages}</button>`;
      }

      // Botón siguiente
      if (page < totalPages) {
        paginationHTML += `
          <button class="pagination-btn px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-r-md hover:bg-gray-50 hover:text-gray-700 transition-colors" data-page="${page + 1}">
            Next
          </button>
        `;
      }

      paginationContainer!.innerHTML = paginationHTML;

      // Agregar event listeners a los botones de paginación
      document.querySelectorAll(".pagination-btn").forEach((btn) => {
        btn.addEventListener("click", (e) => {
          const newPage = parseInt(
            (e.target as HTMLElement).dataset.page || "1"
          );
          currentPage = newPage;
          updateURL();
          executeSearch(lastQuery, lastFilters, lastSort, newPage);
        });
      });
    }

    // Función para mostrar sugerencias relacionadas
    function displayRelatedSuggestions(query: string) {
      if (!query) {
        relatedSuggestions!.style.display = "none";
        return;
      }

      try {
        const suggestions = getSearchSuggestions(query, "en", 5);

        if (suggestions.length > 0) {
          const suggestionsHTML = suggestions
            .map(
              (suggestion) => `
              <button class="suggestion-btn w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-md transition-colors">
                ${suggestion}
              </button>
            `
            )
            .join("");

          suggestionsListsContainer!.innerHTML = suggestionsHTML;
          relatedSuggestions!.style.display = "block";

          // Event listeners para sugerencias
          document.querySelectorAll(".suggestion-btn").forEach((btn) => {
            btn.addEventListener("click", (e) => {
              const suggestion = (e.target as HTMLElement).textContent || "";
              const searchInput = document.getElementById(
                "search-input"
              ) as HTMLInputElement;
              if (searchInput) {
                searchInput.value = suggestion;
                executeSearch(suggestion, getFilters(), lastSort, 1);
                updateURL();
              }
            });
          });
        } else {
          relatedSuggestions!.style.display = "none";
        }
      } catch (error) {
        console.error("Error getting suggestions:", error);
        relatedSuggestions!.style.display = "none";
      }
    }

    // Función para obtener filtros actuales
    function getFilters() {
      return {
        category: categorySelect?.value || "",
        type: typeSelect?.value || "",
      };
    }

    // Función para actualizar URL sin recargar
    function updateURL() {
      const params = new URLSearchParams();
      if (lastQuery) params.set("q", lastQuery);
      if (lastFilters.initialCategory) params.set("category", lastFilters.initialCategory);
      if (lastFilters.type) params.set("type", lastFilters.type);
      if (currentPage > 1) params.set("page", currentPage.toString());

      const newUrl = `${window.location.pathname}?${params.toString()}`;
      window.history.pushState({}, "", newUrl);
    }

    // Estados de la interfaz
    function showLoadingState() {
      resultsContainer!.innerHTML = `
        <div class="text-center py-12">
          <div class="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-primary mb-4"></div>
          <p class="text-gray-500 text-lg">Searching...</p>
        </div>
      `;
      resultsHeader!.style.display = "none";
      paginationContainer!.style.display = "none";
    }

    function showEmptyState() {
      resultsContainer!.innerHTML = `
        <div class="text-center py-12">
          <svg class="w-20 h-20 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
          <p class="text-gray-500 text-lg">Enter a search term to begin</p>
        </div>
      `;
      resultsHeader!.style.display = "none";
      paginationContainer!.style.display = "none";
      relatedSuggestions!.style.display = "none";
    }

    function showNoResultsState(query: string) {
      resultsContainer!.innerHTML = `
        <div class="text-center py-12">
          <svg class="w-20 h-20 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.34 0-4.462-.793-6.172-2.172M6.828 6.828A9.966 9.966 0 0012 3c2.34 0 4.462.793 6.172 2.172M12 21a9.966 9.966 0 01-6.172-2.172"></path>
          </svg>
          <h3 class="text-xl font-medium text-gray-900 mb-2">No results found</h3>
          <p class="text-gray-500 mb-4">Try searching with different keywords or check your spelling.</p>
          <div class="text-sm text-gray-400">
            <p>Search tips:</p>
            <ul class="list-disc list-inside mt-2 space-y-1">
              <li>Use more general keywords</li>
              <li>Check your spelling</li>
              <li>Try different word combinations</li>
              <li>Remove filters to see more results</li>
            </ul>
          </div>
        </div>
      `;
      resultsHeader!.style.display = "none";
      paginationContainer!.style.display = "none";
    }

    function showErrorState() {
      resultsContainer!.innerHTML = `
        <div class="text-center py-12">
          <svg class="w-20 h-20 text-red-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <h3 class="text-xl font-medium text-gray-900 mb-2">Search Error</h3>
          <p class="text-gray-500">There was an error performing the search. Please try again.</p>
        </div>
      `;
      resultsHeader!.style.display = "none";
      paginationContainer!.style.display = "none";
    }

    // Event Listeners
    const searchForm = document.querySelector("form");
    searchForm?.addEventListener("submit", (e) => {
      e.preventDefault();
      const formData = new FormData(e.target as HTMLFormElement);
      const query = formData.get("q") as string;
      currentPage = 1;
      executeSearch(query, getFilters(), lastSort, currentPage);
      updateURL();
    });

    // Filtros
    categorySelect?.addEventListener("change", () => {
      currentPage = 1;
      executeSearch(lastQuery, getFilters(), lastSort, currentPage);
      updateURL();
    });

    typeSelect?.addEventListener("change", () => {
      currentPage = 1;
      executeSearch(lastQuery, getFilters(), lastSort, currentPage);
      updateURL();
    });

    // Ordenamiento
    sortSelect?.addEventListener("change", (e) => {
      lastSort = (e.target as HTMLSelectElement).value;
      currentPage = 1;
      executeSearch(lastQuery, lastFilters, lastSort, currentPage);
      updateURL();
    });

    // Limpiar filtros
    clearFiltersBtn?.addEventListener("click", () => {
      if (categorySelect) categorySelect.value = "";
      if (typeSelect) typeSelect.value = "";
      currentPage = 1;
      lastFilters = {};
      if (lastQuery) {
        executeSearch(lastQuery, {}, lastSort, currentPage);
        updateURL();
      }
    });

    // Búsqueda inicial
    if (initialQuery) {
      lastFilters = getFilters();
      executeSearch(initialQuery, lastFilters, lastSort, currentPage);
    } else {
      showEmptyState();
    }
  });
</script>

<style>
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  mark {
    border-radius: 4px;
    padding: 2px 4px;
    font-weight: 500;
  }

  /* Animaciones para resultados */
  article {
    opacity: 0;
    transform: translateY(20px);
    animation: fadeInUp 0.4s ease-out forwards;
  }

  article:nth-child(2) {
    animation-delay: 0.1s;
  }
  article:nth-child(3) {
    animation-delay: 0.2s;
  }
  article:nth-child(4) {
    animation-delay: 0.3s;
  }

  @keyframes fadeInUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Mejoras para paginación */
  .pagination-btn {
    position: relative;
    overflow: hidden;
  }

  .pagination-btn::before {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 255, 255, 0.2),
      transparent
    );
    transition: left 0.5s;
  }

  .pagination-btn:hover::before {
    left: 100%;
  }

  /* Responsive adjustments */
  @media (max-width: 1024px) {
    aside {
      display: none;
    }
  }

  @media (max-width: 768px) {
    .flex.gap-8 {
      flex-direction: column;
      gap: 1rem;
    }

    #filters-container {
      flex-direction: column;
      gap: 0.75rem;
    }

    #filters-container > div {
      width: 100%;
    }
  }
</style>
