---
// src/pages/search.astro
import Layout from "../layouts/Layout.astro";

// Obtener el query de búsqueda de la URL
const url = Astro.url;
const searchQuery = url.searchParams.get("q") || "";
const category = url.searchParams.get("category") || "";
const type = url.searchParams.get("type") || "";
const page = parseInt(url.searchParams.get("page") || "1");

// Importamos las traducciones
import enTranslations from "../../public/locales/en/common.json";

const t = (key: string): string => {
  const keys = key.split(".");
  let value: any = enTranslations;

  for (const k of keys) {
    value = value?.[k];
  }

  return value || key;
};

// Configurar página para SEO
const pageType = "SearchResultsPage";
---

<Layout
  title={searchQuery
    ? `${t("search.results_for")} "${searchQuery}" - Ignia`
    : `${t("search.results_title")} - Ignia`}
  Content_Description={searchQuery
    ? `${t("search.results_for")} "${searchQuery}" on Ignia website`
    : "Search results on Ignia website"}
  pageType={pageType}
>
  <div class="max-w-6xl mx-auto px-4 py-8">
    <!-- Header de búsqueda -->
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-gray-900 mb-4">
        {
          searchQuery
            ? `${t("search.results_for")} "${searchQuery}"`
            : t("search.results_title")
        }
      </h1>

      <!-- Formulario de búsqueda mejorado -->
      <form action="/search" method="GET" class="max-w-3xl mb-6">
        <div class="relative">
          <input
            type="search"
            name="q"
            value={searchQuery}
            placeholder={t("search.placeholder")}
            class="w-full pl-12 pr-20 py-4 border border-gray-300 rounded-xl focus:ring-2 focus:ring-primary focus:border-primary transition-all duration-200 bg-white shadow-sm text-lg"
            autocomplete="off"
            id="search-input"
          />
          <div
            class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none"
          >
            <svg
              class="w-6 h-6 text-gray-400"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
          </div>
          <button
            type="submit"
            class="absolute right-3 top-1/2 transform -translate-y-1/2 bg-primary text-white px-6 py-2 rounded-lg hover:bg-secondary transition-all duration-200 font-medium shadow-sm"
          >
            {t("search.button")}
          </button>
        </div>
      </form>

      <!-- Filtros avanzados -->
      <div class="flex flex-wrap gap-4 mb-6" id="filters-container">
        <!-- Filtro por categoría -->
        <div class="relative">
          <select
            name="category"
            id="category-filter"
            class="appearance-none bg-white border border-gray-300 rounded-lg px-4 py-2 pr-8 focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary"
          >
            <option value="">All Categories</option>
            <option value="service">Services</option>
            <option value="product">Products</option>
            <option value="article">Articles</option>
          </select>
          <div class="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
            <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
            </svg>
          </div>
        </div>

        <!-- Filtro por tipo -->
        <div class="relative">
          <select
            name="type"
            id="type-filter"
            class="appearance-none bg-white border border-gray-300 rounded-lg px-4 py-2 pr-8 focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary"
          >
            <option value="">All Types</option>
          </select>
          <div class="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
            <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
            </svg>
          </div>
        </div>

        <!-- Botón para limpiar filtros -->
        <button
          type="button"
          id="clear-filters"
          class="px-4 py-2 text-sm text-gray-600 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors duration-200"
        >
          Clear Filters
        </button>
      </div>
    </div>

    <!-- Contenedor principal con sidebar y resultados -->
    <div class="flex gap-8">
      <!-- Sidebar con estadísticas y filtros -->
      <aside class="w-64 hidden lg:block">
        <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-6">
          <h3 class="font-semibold text-gray-900 mb-4">Search Statistics</h3>
          <div class="space-y-3">
            <div class="flex justify-between text-sm">
              <span class="text-gray-600">Total Results:</span>
              <span class="font-medium" id="total-results">0</span>
            </div>
            <div class="flex justify-between text-sm">
              <span class="text-gray-600">Search Time:</span>
              <span class="font-medium" id="search-time">0ms</span>
            </div>
            <div class="flex justify-between text-sm">
              <span class="text-gray-600">Current Page:</span>
              <span class="font-medium" id="current-page">1</span>
            </div>
          </div>
        </div>

        <!-- Sugerencias relacionadas -->
        <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6" id="related-suggestions" style="display: none;">
          <h3 class="font-semibold text-gray-900 mb-4">Related Searches</h3>
          <div class="space-y-2" id="suggestions-list">
            <!-- Las sugerencias se llenarán dinámicamente -->
          </div>
        </div>
      </aside>

      <!-- Resultados de búsqueda -->
      <main class="flex-1">
        <!-- Información de resultados -->
        <div class="flex items-center justify-between mb-6" id="results-header" style="display: none;">
          <div class="text-sm text-gray-600" id="results-info">
            <!-- Se llenará dinámicamente -->
          </div>
          
          <!-- Ordenamiento -->
          <div class="flex items-center gap-2">
            <label for="sort-select" class="text-sm text-gray-600">Sort by:</label>
            <select
              id="sort-select"
              class="text-sm border border-gray-300 rounded-lg px-3 py-1 focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary"
            >
              <option value="relevance">Relevance</option>
              <option value="title">Title A-Z</option>
              <option value="category">Category</option>
            </select>
          </div>
        </div>

        <!-- Contenedor de resultados -->
        <div id="search-results" class="space-y-6">
          <div class="text-center py-12">
            <svg
              class="w-20 h-20 text-gray-400 mx-auto mb-4"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
            <p class="text-gray-500 text-lg" id="loading-text">
              {searchQuery ? "Searching..." : "Enter a search term to begin"}
            </p>
          </div>
        </div>

        <!-- Paginación -->
        <nav class="flex items-center justify-center space-x-2 mt-8" id="pagination" style="display: none;">
          <!-- Se llenará dinámicamente -->
        </nav>
      </main>
    </div>
  </div>
</Layout>

<script>
  import MiniSearch from "minisearch";

  // Datos de ejemplo para la búsqueda
  const searchData = [
    {
      id: 1,
      title: "Cloud Solutions",
      content:
        "Comprehensive cloud computing solutions for modern businesses. Scalable, secure, and reliable infrastructure.",
      url: "/soluciones/",
      category: "Solutions",
    },
    {
      id: 2,
      title: "Artificial Intelligence Services",
      content:
        "AI-powered solutions to transform your business operations and enhance decision-making capabilities.",
      url: "/IA/",
      category: "Services",
    },
    {
      id: 3,
      title: "Managed IT Support",
      content:
        "Professional IT support and management services to keep your systems running smoothly 24/7.",
      url: "/Managed-IT/",
      category: "Support",
    },
    {
      id: 4,
      title: "Enterprise Products",
      content:
        "Cutting-edge enterprise products designed for scalability, security, and performance.",
      url: "/productos/",
      category: "Products",
    },
    {
      id: 5,
      title: "Technical Support",
      content:
        "Expert technical support team ready to help you with any questions or issues you may have.",
      url: "/soporte/",
      category: "Support",
    },
    {
      id: 6,
      title: "Custom Services",
      content:
        "Tailored technology services designed to meet your specific business requirements and goals.",
      url: "/servicios/",
      category: "Services",
    },
  ];

  document.addEventListener("DOMContentLoaded", () => {
    const resultsContainer = document.getElementById("search-results");
    const loadingText = document.getElementById("loading-text");
    const searchQuery =
      new URLSearchParams(window.location.search).get("q") || "";

    // Configurar MiniSearch
    const miniSearch = new MiniSearch({
      fields: ["title", "content", "category"], // campos para buscar
      storeFields: ["title", "content", "url", "category"], // campos para almacenar
      searchOptions: {
        boost: { title: 2 }, // dar más peso al título
        fuzzy: 0.2, // permitir coincidencias difusas
      },
    });

    // Indexar los datos
    miniSearch.addAll(searchData);

    // Función para realizar la búsqueda
    function performSearch(query: string) {
      if (!query.trim()) {
        showEmptyState();
        return;
      }

      loadingText!.textContent = "Searching...";

      setTimeout(() => {
        const results = miniSearch
          .search(query, {
            prefix: true, // buscar prefijos también
          })
          .slice(0, 10); // limitar a 10 resultados

        displayResults(results, query);
      }, 300); // Simular delay de búsqueda
    }

    // Función para mostrar resultados
    function displayResults(results: any[], query: string) {
      if (results.length === 0) {
        resultsContainer!.innerHTML = `
          <div class="text-center py-8">
            <svg class="w-16 h-16 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.34 0-4.462-.793-6.172-2.172M6.828 6.828A9.966 9.966 0 0012 3c2.34 0 4.462.793 6.172 2.172M12 21a9.966 9.966 0 01-6.172-2.172"></path>
            </svg>
            <h3 class="text-lg font-medium text-gray-900 mb-2">No results found</h3>
            <p class="text-gray-500">Try searching with different keywords or check your spelling.</p>
          </div>
        `;
        return;
      }

      const resultsHTML = results
        .map(
          (result) => `
        <article class="bg-white border border-gray-200 rounded-lg p-6 shadow-sm hover:shadow-md transition-shadow">
          <div class="flex items-start justify-between">
            <div class="flex-1">
              <div class="flex items-center gap-2 mb-2">
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary/10 text-primary">
                  ${result.category}
                </span>
                <span class="text-sm text-gray-500">Score: ${Math.round(result.score * 100) / 100}</span>
              </div>
              <h2 class="text-xl font-semibold text-gray-900 mb-2">
                <a href="${result.url}" class="hover:text-primary transition-colors">
                  ${highlightMatch(result.title, query)}
                </a>
              </h2>
              <p class="text-gray-600 mb-3 line-clamp-3">
                ${highlightMatch(result.content, query)}
              </p>
              <a href="${result.url}" class="inline-flex items-center text-primary hover:text-secondary transition-colors">
                Read more
                <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
              </a>
            </div>
          </div>
        </article>
      `
        )
        .join("");

      resultsContainer!.innerHTML = `
        <div class="mb-4">
          <p class="text-sm text-gray-600">
            Found ${results.length} result${results.length !== 1 ? "s" : ""} for "<strong>${query}</strong>"
          </p>
        </div>
        ${resultsHTML}
      `;
    }

    // Función para resaltar coincidencias
    function highlightMatch(text: string, query: string): string {
      if (!query) return text;

      const regex = new RegExp(`(${query})`, "gi");
      return text.replace(
        regex,
        '<mark class="bg-yellow-200 font-medium">$1</mark>'
      );
    }

    // Función para mostrar estado vacío
    function showEmptyState() {
      resultsContainer!.innerHTML = `
        <div class="text-center py-8">
          <svg class="w-16 h-16 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
          <p class="text-gray-500">Enter a search term to begin</p>
        </div>
      `;
    }

    // Realizar búsqueda inicial si hay query
    if (searchQuery) {
      performSearch(searchQuery);
    } else {
      showEmptyState();
    }

    // Escuchar cambios en el formulario
    const searchForm = document.querySelector("form");
    searchForm?.addEventListener("submit", (e) => {
      const formData = new FormData(e.target as HTMLFormElement);
      const query = formData.get("q") as string;

      // Actualizar URL sin recargar la página
      const newUrl = new URL(window.location.href);
      newUrl.searchParams.set("q", query);
      window.history.pushState({}, "", newUrl.toString());

      // Realizar búsqueda
      performSearch(query);

      e.preventDefault();
    });
  });
</script>

<style>
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  mark {
    border-radius: 2px;
    padding: 1px 2px;
  }
</style>
